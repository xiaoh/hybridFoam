/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

\*---------------------------------------------------------------------------*/

#ifndef MapVolFields_H
#define MapVolFields_H

#include "GeometricField.H"
#include "meshToMesh.H"
#include "IOobjectList.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

template<class Type>
void MapVolFields
(
    const IOobjectList& objects,
    const meshToMesh& meshToMeshInterp,
    HashTable<word>& fieldsToMap
)
{
    const fvMesh& meshSource = meshToMeshInterp.fromMesh();
    const fvMesh& meshTarget = meshToMeshInterp.toMesh();

    word fieldClassName
    (
        GeometricField<Type, fvPatchField, volMesh>::typeName
    );

    IOobjectList fields = objects.lookupClass(fieldClassName);

    for
    (
        IOobjectList::iterator fieldIter = fields.begin();
        fieldIter != fields.end();
        ++fieldIter
    )
    {
        if(! fieldsToMap.found(fieldIter()->name()))
        {
            continue;
        }

        IOobject fieldTargetIOobject
        (
            fieldsToMap[fieldIter()->name()],
            meshTarget.time().timeName(),
            meshTarget,
            IOobject::NO_READ,
            IOobject::AUTO_WRITE
        );


        Info<< "    interpolating " << fieldIter()->name()
            << endl;
        
        {
            // Read field fieldSource
            GeometricField<Type, fvPatchField, volMesh> fieldSource
                (
                    *fieldIter(),
                    meshSource
                );
            

            // Interpolate field
            GeometricField<Type, fvPatchField, volMesh> fieldTarget
            (
                fieldTargetIOobject,
                meshToMeshInterp.interpolate
                (
                    fieldSource,
                    meshToMesh::INTERPOLATE
                )
            );

//             // Read fieldTarget
//             GeometricField<Type, fvPatchField, volMesh> fieldTarget
//                 (
//                     fieldTargetIOobject,
//                     meshTarget,
//                     fieldSource.dimensions(),
//                     "fixedValue"
//                     //                    zeroGradientFvPatchField<Type>::typeName  
//                 );
            
//             fieldTarget.internalField() *= 0.0;

//             // Interpolate field
//             meshToMeshInterp.interpolate
//                 (
//                     fieldTarget,
//                     fieldSource,
//                     meshToMesh::INTERPOLATE
//                 );
            
            // Write field
            fieldTarget.write();
        }
    }
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
